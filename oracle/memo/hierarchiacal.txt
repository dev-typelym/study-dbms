계층형 쿼리	
	SELECT 컬럼, ...
	FROM 테이블
	START WITH 시작조건
	CONNECT BY [NOCYCLE](순환구조일때만) PRIOR 연결조건
	[ORDER SIBLINGS BY 컬럼명]; 

계층형 쿼리를 쉽게 사용하기 위해 제공하는 가상 컬럼 
	LEVEL
		해당 데이터의 레벨을 담고있는 컬럼
	CONNECT_BY_ISLEAF
		자식이 없는 노드라면 1 아니면 0이 들어있는 가상컬럼
	CONNECT_BY_ISCYCLE
		사이클이 발생했다면 1, 아니면 0이 들어있는 가상컬럼

계층형 쿼리를 쉽게 사용하기 위해 제공하는 함수
	SYS_CONNECT_BY_PATH(컬럼, 분리기호)
		현재까지 지나온 행의 컬럼 속 데이터 값들의 경로 표시
	CONNECT_BY_ROOT()
		데이터 전개를 시작한 루트 행의 값

INSERT
	데이터 추가
	
	INSERT INTO  테이블이름(컬럼, 컬럼, 컬럼, ...)
	VALUES(값, 값, 값, ...);
	
	컬럼이름을 직접 명시할 경우에는 각각의 값들이 컬럼 작성순으로 
	들어가게 되며, 생략한 컬럼이 있을 경우에는 기본값이 삽입된다.
	(기본값이 설정 안되어 있으면 NULL이 들어감)

	INSERT INTO 테이블이름
	VALUES(값, 값, 값, ...);
	
	무조건 모든 컬럼에 대한 값을 순서대로 작성해주어야 한다.
	
	값을 삽입할 때는 제약조건을 위반하지 않는 값들만 추가가 가능하다.

제약조건의 종류
	PRIMARY KEY 기본키
		중복되는 값은 저장할 수 없다.
		NULL값은 저장할 수 없다.
	FOREIGN KEY 외래키
		제공 하는 테이블(부모), 제공 받는 테이블(자식)
		자식컬럼에는 부모컬럼에 있는 데이터만 추가할 수 있고
		부모컬럼의 값은 자식에서 사용안하는 값만 삭제 수정가능
	UNIQUE
		해당 컬럼의 값들이 중복되면 안된다.
	CHECK 
		값의 범위가 정해져있다.
	NOT NULL
		NULL값은 넣을 수 없다.

UPDATE
	수정
	
	UPDATE 테이블이름
	SET 컬럼 = 값, 컬렴 = 값,...
	WHERE 조건;

DELETE 
	삭제
	DELETE [FROM] 테이블
	WHERE 조건;	